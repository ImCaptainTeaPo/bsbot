
import json
import threading
import time
from telegram.ext import Updater, CommandHandler
from telegram import ParseMode
from config import TOKEN, ADMIN_ID
import requests
import datetime

USERS_FILE = 'users.json'
EVENTS_FILE = 'events.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
def load_events():
    try:
        with open(EVENTS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è: {e}")
        return []

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
def save_events(events):
    with open(EVENTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(events, f, ensure_ascii=False, indent=2)

# –ö–æ–º–∞–Ω–¥—ã
def start(update, context):
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö Blood and Soul.\n–ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

def help_command(update, context):
    update.message.reply_text(
        "üìú –ö–æ–º–∞–Ω–¥—ã:\n"
        "/subscribe ‚Äî –≤–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/unsubscribe ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "/events ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å—É—Ç–∫–∏\n"
        "/enable <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        "/disable <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å\n"
        "/my ‚Äî —Ç–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/add_event \"–ù–∞–∑–≤–∞–Ω–∏–µ\" –í–†–ï–ú–Ø ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–∞–¥–º–∏–Ω)\n"
        "/edit_event \"–°—Ç–∞—Ä–æ–µ\" \"–ù–æ–≤–æ–µ\" –í–†–ï–ú–Ø ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–∞–¥–º–∏–Ω)\n"
        "/delete_event \"–ù–∞–∑–≤–∞–Ω–∏–µ\" ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–∞–¥–º–∏–Ω)\n"
        "/reset ‚Äî —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫")

def subscribe(update, context):
    user_id = str(update.effective_user.id)
    users = load_users()
    events = load_events()
    users[user_id] = [event["name"] for event in events]
    save_users(users)
    update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –í—Å–µ —Å–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")

def unsubscribe(update, context):
    user_id = str(update.effective_user.id)
    users = load_users()
    users[user_id] = []
    save_users(users)
    update.message.reply_text("‚ùå –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã.")

def events(update, context):
    events = load_events()
    if not events:
        update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç.")
        return

    def get_sort_key(e):
        if "time" in e:
            return e["time"]
        elif "start" in e:
            return e["start"]
        else:
            return "99:99"  # –Ω–∞ –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    sorted_events = sorted(events, key=get_sort_key)

    message = "üóì <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ —Å—É—Ç–∫–∏:</b>\n\n"
    for e in sorted_events:
        if "time" in e:
            message += f"{e['time']} ‚Äî {e['name']}\n"
        elif "start" in e and "end" in e:
            message += f"{e['start']}‚Äì{e['end']} ‚Äî {e['name']}\n"

    update.message.reply_text(message.strip(), parse_mode=ParseMode.HTML)


def my(update, context):
    user_id = str(update.effective_user.id)
    users = load_users()
    active = users.get(user_id, [])
    if not active:
        update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –≤–∫–ª—é—á—ë–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
    else:
        msg = "üîî –í–∫–ª—é—á—ë–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n" + "\n".join(f"‚Ä¢ {name}" for name in active)
        update.message.reply_text(msg)

def enable(update, context):
    user_id = str(update.effective_user.id)
    users = load_users()
    events = load_events()
    name = " ".join(context.args).strip()
    all_names = [e["name"] for e in events]
    if name not in all_names:
        update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    users.setdefault(user_id, [])
    if name not in users[user_id]:
        users[user_id].append(name)
    save_users(users)
    update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ¬´{name}¬ª –≤–∫–ª—é—á–µ–Ω–æ.")

def disable(update, context):
    user_id = str(update.effective_user.id)
    users = load_users()
    name = " ".join(context.args).strip()
    if name in users.get(user_id, []):
        users[user_id].remove(name)
        save_users(users)
        update.message.reply_text(f"‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è ¬´{name}¬ª –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    else:
        update.message.reply_text("‚ö†Ô∏è –£ —Ç–µ–±—è –æ–Ω–æ –∏ —Ç–∞–∫ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

def reset(update, context):
    user_id = str(update.effective_user.id)
    users = load_users()
    users[user_id] = []
    save_users(users)
    update.message.reply_text("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")

def is_admin(user_id):
    return user_id == ADMIN_ID

def add_event(update, context):
    if not is_admin(update.effective_user.id):
        update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è.")
        return
    try:
        name = context.args[0].strip('"‚Äú‚Äù')
        time_str = context.args[1]
        events = load_events()
        events.append({"name": name, "time": time_str})
        save_events(events)
        update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ ¬´{name}¬ª –≤ {time_str} –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
    except:
        update.message.reply_text('‚ùå –§–æ—Ä–º–∞—Ç: /add_event "–ù–∞–∑–≤–∞–Ω–∏–µ" –í–†–ï–ú–Ø')

def edit_event(update, context):
    if not is_admin(update.effective_user.id):
        update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.")
        return
    try:
        old_name = context.args[0].strip('"‚Äú‚Äù')
        new_name = context.args[1].strip('"‚Äú‚Äù')
        new_time = context.args[2]
        events = load_events()
        for e in events:
            if e["name"] == old_name:
                e["name"] = new_name
                e["time"] = new_time
                save_events(events)
                update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
                return
        update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except:
        update.message.reply_text('‚ùå –§–æ—Ä–º–∞—Ç: /edit_event "–°—Ç–∞—Ä–æ–µ" "–ù–æ–≤–æ–µ" –í–†–ï–ú–Ø')

def delete_event(update, context):
    if not is_admin(update.effective_user.id):
        update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–±—ã—Ç–∏—è.")
        return
    try:
        name = " ".join(context.args).strip('"‚Äú‚Äù')
        events = load_events()
        events = [e for e in events if e["name"] != name]
        save_events(events)
        update.message.reply_text(f"üóë –°–æ–±—ã—Ç–∏–µ ¬´{name}¬ª —É–¥–∞–ª–µ–Ω–æ.")
    except:
        update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.")



# üîî –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def notification_loop(bot):
    while True:
        now = time.strftime("%H:%M")
        print(f"[–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫] –°–µ–π—á–∞—Å: {now}")
        events = load_events()
        users = load_users()

        for event in events:
            try:
                name = event.get("name")

                if "time" in event:
                    # –û–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                    h, m = map(int, event["time"].split(":"))
                    total_minutes = h * 60 + m - 10
                    notify_time = f"{total_minutes // 60:02d}:{total_minutes % 60:02d}"
                elif "start" in event:
                    # –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
                    h, m = map(int, event["start"].split(":"))
                    total_minutes = h * 60 + m - 10
                    notify_time = f"{total_minutes // 60:02d}:{total_minutes % 60:02d}"
                else:
                    continue

                if now == notify_time:
                    print(f"[–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ] –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç: {name}")
                    for user_id, enabled in users.items():
                        if name in enabled:
                            bot.send_message(chat_id=user_id, text=f"‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç: {name}")
            except Exception as e:
                print(f"[–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è]: {e}")
        time.sleep(60)


def self_ping_loop():
    url = "https://<–¢–í–û–ô-–ê–î–†–ï–°>.onrender.com"  # –≤—Å—Ç–∞–≤—å –ø–æ–∑–∂–µ
    while True:
        try:
            response = requests.get(url)
            print(f"[–°–∞–º–æ–ø–∏–Ω–≥] {datetime.datetime.now().strftime('%H:%M:%S')} ‚Äî —Å—Ç–∞—Ç—É—Å {response.status_code}")
        except Exception as e:
            print(f"[–°–∞–º–æ–ø–∏–Ω–≥] –û—à–∏–±–∫–∞: {e}")
        time.sleep(600)  # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç

def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("subscribe", subscribe))
    dp.add_handler(CommandHandler("unsubscribe", unsubscribe))
    dp.add_handler(CommandHandler("events", events))
    dp.add_handler(CommandHandler("my", my))
    dp.add_handler(CommandHandler("enable", enable))
    dp.add_handler(CommandHandler("disable", disable))
    dp.add_handler(CommandHandler("reset", reset))
    dp.add_handler(CommandHandler("add_event", add_event))
    dp.add_handler(CommandHandler("edit_event", edit_event))
    dp.add_handler(CommandHandler("delete_event", delete_event))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # üîÅ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notify_thread = threading.Thread(target=notification_loop, args=(updater.bot,), daemon=True)
    notify_thread.start()

    # üîÅ –ó–∞–ø—É—Å–∫ —Å–∞–º–æ–ø–∏–Ω–≥–∞
    ping_thread = threading.Thread(target=self_ping_loop, daemon=True)
    ping_thread.start()

    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
